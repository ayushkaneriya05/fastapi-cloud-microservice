# This workflow builds and deploys the application to AWS EC2 without running tests.
# It triggers automatically on a push to the 'main' branch and can also be run manually.
name: Deploy to AWS EC2

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: fastapi-cloud-microservice

jobs:
  build-and-deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Debug Secrets (masking enabled)
        run: |
          echo "AWS_ACCESS_KEY_ID is set: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
          echo "AWS_SECRET_ACCESS_KEY is set: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: "just-a-placeholder"
      - name: Debug EC2_HOST
        run: echo "EC2_HOST=${{ secrets.EC2_HOST }}"
      - name: Add EC2 to Known Hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          IMAGE: ${{ steps.build-image.outputs.image }}
          ENV_PROD_FILE_CONTENT: ${{ secrets.ENV_PROD_FILE }}
        run: |
          # Create the app directory on the server
          ssh $EC2_USER@$EC2_HOST "mkdir -p /home/$EC2_USER/app"

          # Copy deployment files to the server
          scp docker-compose.prod.yml entrypoint.sh $EC2_USER@$EC2_HOST:/home/$EC2_USER/app/

          # Create the .env.prod file on the server from the GitHub secret
          ssh $EC2_USER@$EC2_HOST "echo '${ENV_PROD_FILE_CONTENT}' > /home/$EC2_USER/app/.env.prod"

          # SSH into the server to run deployment commands
          ssh $EC2_USER@$EC2_HOST '
            set -e # Exit immediately if a command fails
            cd /home/$EC2_USER/app
            
            # Log in to AWS ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            
            # Pull the new image
            docker pull ${{ env.IMAGE }}
            
            # Set the image name for docker-compose
            export IMAGE_NAME=${{ env.IMAGE }}
            
            # Start the new container and remove old ones
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
          '
