# This workflow builds and deploys the application to AWS EC2
# It triggers automatically on a push to the 'main' branch and can also be run manually.
name: Deploy to AWS EC2

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: fastapi-cloud-microservice

jobs:
  build-and-deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: "just-a-placeholder"

      - name: Add EC2 to Known Hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          IMAGE: ${{ steps.build-image.outputs.image }}
          ENV_PROD_FILE_CONTENT: ${{ secrets.ENV_PROD_FILE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          ssh $EC2_USER@$EC2_HOST "
            set -e
            mkdir -p /home/$EC2_USER/app

            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo dnf update -y
              sudo dnf install -y docker awscli
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $EC2_USER
            fi

            # Write .env.prod file
            echo '${ENV_PROD_FILE_CONTENT}' > /home/$EC2_USER/app/.env.prod
          "

          # Copy deployment files
          scp docker-compose.prod.yml entrypoint.sh $EC2_USER@$EC2_HOST:/home/$EC2_USER/app/

          # Deploy the container (fresh deployment)
          ssh $EC2_USER@$EC2_HOST "
            set -e
            cd /home/$EC2_USER/app

            echo 'üî¥ Stopping old containers...'
            docker compose -f docker-compose.prod.yml down --remove-orphans || true

            echo 'üßπ Cleaning old Docker resources...'
            docker container prune -f || true
            docker image prune -a -f || true
            docker volume prune -f || true
            docker network prune -f || true
            docker system prune -a --volumes -f || true

            echo 'üîë Logging in to AWS ECR...'
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin \$(echo $IMAGE | cut -d/ -f1)

            echo '‚¨áÔ∏è Pulling new image...'
            docker pull $IMAGE
            export IMAGE_NAME=$IMAGE

            echo 'üöÄ Starting fresh deployment...'
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
          "
