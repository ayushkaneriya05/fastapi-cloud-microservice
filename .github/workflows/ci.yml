# This is a comprehensive CI pipeline for your FastAPI application.
# It lints and tests the code on every push and pull request to the main branch.
# name: FastAPI CI Pipeline

# on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]
#   workflow_dispatch:

# jobs:
#   # ----------------------------
#   # 1️⃣ Linting & Code Quality Job
#   # ----------------------------
#   lint:
#     name: Lint & Code Style
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.13.6"
#           cache: "pip"

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -e ".[dev]"

#       - name: Run linters
#         run: |
#           ruff check .
#           black --check .
#           mypy .

#   # ----------------------------
#   # 2️⃣ Testing Job
#   # ----------------------------
#   test:
#     name: Run Tests
#     runs-on: ubuntu-latest
#     needs: lint
#     services:
#       postgres:
#         image: postgres:16
#         env:
#           POSTGRES_DB: ecomdb_test
#           POSTGRES_USER: ecomuser
#           POSTGRES_PASSWORD: ecompass
#         ports: ["5432:5432"]
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#       mongo:
#         image: mongo:7
#         ports: ["27017:27017"]
#         options: >-
#           --health-cmd "mongosh --eval 'db.runCommand({ping: 1})' --quiet"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.13.6"
#           cache: "pip"

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -e ".[dev]"

#       - name: Run tests with Pytest
#         run: pytest -v --cov=app --cov-report=xml
#         env:
#           TEST_POSTGRES_HOST: localhost
#           TEST_MONGO_HOST: localhost
#           JWT_SECRET: "test-secret"
#           AWS_ACCESS_KEY_ID: "test-key"
#           AWS_SECRET_ACCESS_KEY: "test-secret-key"
#           EMAIL_FROM: "ci@example.com"
#           SMTP_HOST: "smtp.example.com"
#           SMTP_PORT: "587"
#           SMTP_USER: "user"
#           SMTP_PASSWORD: "password"

#       - name: Upload coverage to Codecov
#         uses: codecov/codecov-action@v4
#         with:
#           token: ${{ secrets.CODECOV_TOKEN }}
#           files: ./coverage.xml
#           fail_ci_if_error: true
